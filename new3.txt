//with empty sub dir
const path = require('path');

// List of file paths
const filePaths = [
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\pqr.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\authorization\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\authorization\\dummy\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\claims\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\utility\\ERpackage\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\utility\\abc.java"
];

// Helper function to build directory structure
function buildFolderStructure(filePaths) {
  let rootStructure = {
    dirName: "appsuites",  // Root directory name
    files: [],             // Files at the root level
    subDirs: {}            // Subdirectories under "appsuites"
  };

  // Process each file path
  filePaths.forEach(filePath => {
    // Get relative path after "appsuites"
    const relativePath = filePath.split('appsuites')[1];  
    const parts = relativePath.split(path.sep);  // Split path into parts (folders and filename)
    const fileName = parts.pop();  // Extract the file name (last part of the path)

    // Traverse or create the directory structure based on the parts
    let currentDir = rootStructure;

    parts.forEach(part => {
      // Check if the current subDir exists; if not, create it
      if (!currentDir.subDirs[part]) {
        currentDir.subDirs[part] = {
          files: [],
          subDirs: {}
        };
      }
      // Move to the subDir for the next iteration
      currentDir = currentDir.subDirs[part];
    });

    // Add the file to the appropriate directory
    if (!currentDir.files.includes(fileName)) {
      currentDir.files.push(fileName);
    }
  });

  return [rootStructure];  // Return the structure wrapped in an array
}

// Get the folder structure
const dirStructure = buildFolderStructure(filePaths);

// Print the resulting structure
console.log(JSON.stringify(dirStructure, null, 2));




######################################################################
without empty subdir



const path = require('path');

// List of file paths
const filePaths = [
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\pqr.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\authorization\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\authorization\\dummy\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\claims\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\utility\\ERpackage\\abc.java",
  "C:\\Users\\fenil\\Documents\\sanity\\suites\\scenarios\\appsuites\\utility\\abc.java"
];

// Helper function to build directory structure
function buildFolderStructure(filePaths) {
  let rootStructure = {
    dirName: "appsuites",  // Root directory name
    files: [],             // Files at the root level
    subDirs: {}            // Subdirectories under "appsuites"
  };

  // Process each file path
  filePaths.forEach(filePath => {
    // Get relative path after "appsuites"
    const relativePath = filePath.split('appsuites')[1];  
    const parts = relativePath.split(path.sep);  // Split path into parts (folders and filename)
    const fileName = parts.pop();  // Extract the file name (last part of the path)

    // Traverse or create the directory structure based on the parts
    let currentDir = rootStructure;

    parts.forEach(part => {
      // Check if the current subDir exists; if not, create it
      if (!currentDir.subDirs[part]) {
        currentDir.subDirs[part] = {
          files: [],
          subDirs: {}
        };
      }
      // Move to the subDir for the next iteration
      currentDir = currentDir.subDirs[part];
    });

    // Add the file to the appropriate directory
    if (!currentDir.files.includes(fileName)) {
      currentDir.files.push(fileName);
    }
  });

  // Remove empty subDirs and subDirs key when empty
  function removeEmptySubDirs(dir) {
    Object.keys(dir.subDirs).forEach(subDir => {
      removeEmptySubDirs(dir.subDirs[subDir]);  // Recursively clean up subDirs

      // If the subDir has no files and no non-empty subDirs, remove the subDir
      if (Object.keys(dir.subDirs[subDir].subDirs).length === 0 && dir.subDirs[subDir].files.length === 0) {
        delete dir.subDirs[subDir];  // Remove empty subDir
      }
    });

    // If there are no files and no non-empty subDirs, remove the subDirs key
    if (Object.keys(dir.subDirs).length === 0 && dir.files.length === 0) {
      delete dir.subDirs;
    }
  }

  removeEmptySubDirs(rootStructure);  // Clean up the root structure
  return [rootStructure];  // Return the structure wrapped in an array
}

// Get the folder structure
const dirStructure = buildFolderStructure(filePaths);

// Print the resulting structure
console.log(JSON.stringify(dirStructure, null, 2));
