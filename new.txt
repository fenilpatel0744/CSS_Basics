let dirParts = ['appsuites', 'utility', 'claims'];  // Example path (appsuites > utility > claims)
let dirSuiteTextData = [];  // Initially empty

// Function to recursively find or create the directory and return its index
function findOrCreateDir(parts, parentDir) {
    if (parts.length === 0) return { dir: parentDir, index: dirSuiteTextData.indexOf(parentDir) };  // Base case: return the directory and its index

    let currentPart = parts[0];  // Get the current part of the path
    let existingDir = parentDir.subDirs?.find(item => item.dirName === currentPart);  // Look for the current part in subDirs

    if (existingDir) {
        // If the directory exists, go deeper into the subDirs
        return findOrCreateDir(parts.slice(1), existingDir);
    } else {
        // If it doesn't exist, create the directory and add it to the parent
        let newDir = { dirName: currentPart, subDirs: [] };  // Create new directory with an empty subDirs array
        parentDir.subDirs = parentDir.subDirs || [];  // Ensure parent has a subDirs array
        parentDir.subDirs.push(newDir);  // Add the new directory to subDirs
        return { dir: newDir, index: parentDir.subDirs.length - 1 };  // Return the newly created directory and its index
    }
}

// Function to find the root (top-level) directory from the main array
function findRootDir(rootName, dirSuiteTextData) {
    return dirSuiteTextData.find(item => item.dirName === rootName);
}

// Check if root ("appsuites") exists in dirSuiteTextData. If not, create it.
let rootDir = findRootDir('appsuites', dirSuiteTextData);
if (!rootDir) {
    // If root doesn't exist, create it
    rootDir = { dirName: 'appsuites', subDirs: [] };
    dirSuiteTextData.push(rootDir);  // Add "appsuites" to the root of dirSuiteTextData
}

// Start building the hierarchy from the root (typically "appsuites")
let result = findOrCreateDir(dirParts, rootDir);
console.log("Directory index of the created/found folder:", result.index);

// Output the updated folder structure
console.log("Updated dirSuiteTextData:", JSON.stringify(dirSuiteTextData, null, 2));

// Function to display the hierarchy
function displayHierarchy(parts, dirSuiteTextData) {
    let rootDir = findRootDir('appsuites', dirSuiteTextData);
    if (rootDir) {
        let hierarchy = 'appsuites';
        let currentDir = rootDir;

        parts.forEach(part => {
            let subDir = currentDir.subDirs.find(item => item.dirName === part);
            if (subDir) {
                hierarchy += ` > ${subDir.dirName}`;
                currentDir = subDir;
            } else {
                hierarchy += ` > ${part} (not found)`;
            }
        });

        return hierarchy;
    } else {
        return 'appsuites not found in dirSuiteTextData';
    }
}

// Example: Display the hierarchy after 'appsuites' folder
let hierarchy = displayHierarchy(dirParts, dirSuiteTextData);
console.log("Folder hierarchy:", hierarchy);
